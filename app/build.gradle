apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: "androidx.navigation.safeargs"
apply from: 'jacoco.gradle'

android {
    compileSdkVersion androidCompileSdkVersion
    defaultConfig {
        applicationId "com.anibalbastias.android.foreignexchange"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode appforeignExchangeVersionCode
        versionName appforeignExchangeVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        resValue "string", "foreignexchange_endpoint", "$globalforeignExchangeDependencies.FOREIGN_EXCHANGE_BASE_ENDPOINT"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        unitTests.all {
            jvmArgs "-Xms2g", "-Xmx2g", "-XX:+UseConcMarkSweepGC", "-XX:+UseParNewGC", "-XX:+DisableExplicitGC"
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
    }
    sourceSets {
        debug {
            java.srcDirs = ['src/debug/java', 'src/debug/java/']
        }
        main {
            resources {
                srcDir '../buildsystem/'
            }
        }
    }
    lintOptions {
        abortOnError false
        warning 'InvalidPackage'
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/androidx.exifinterface_exifinterface.version'
        pickFirst 'lib/armeabi-v7a/libtool-checker.so'
        pickFirst 'lib/arm64-v8a/libtool-checker.so'
        pickFirst 'lib/x86/libtool-checker.so'
        pickFirst 'lib/x86_64/libtool-checker.so'
    }
    dexOptions {
        jumboMode = true
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    androidExtensions {
        experimental = true
    }

    dataBinding {
        enabled = true
    }

    // APK Release name
    setProperty("archivesBaseName", "foreignExchangeApp-v${rootProject.ext.appforeignExchangeVersionName}")
}

kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    def presentationDependencies = rootProject.ext.foreignExchangeDependencies

    // Essential libraries
    implementation presentationDependencies.kotlinStdlib
    implementation presentationDependencies.androidCompatv7
    implementation presentationDependencies.constraintLayout
    implementation presentationDependencies.androidArchExt
    implementation presentationDependencies.androidDesign
    implementation presentationDependencies.androidSupportv4
    implementation presentationDependencies.androidCardView
    implementation presentationDependencies.androidRecyclerView
    implementation presentationDependencies.multidex

    // ViewModel and LiveData
    implementation presentationDependencies.androidArchExt
    kapt presentationDependencies.androidArchCompiler

    // Retrofit + Okhttp
    implementation presentationDependencies.retrofit2
    implementation presentationDependencies.retrofit2Converter
    implementation presentationDependencies.rxAndroid
    implementation presentationDependencies.retrofit2RxAdapter
    implementation presentationDependencies.retrofit2Mock
    implementation presentationDependencies.gson
    implementation presentationDependencies.okHttpLoggingInterceptor
    implementation presentationDependencies.okhttp
    implementation presentationDependencies.okhttpUrlconnection

    // Dagger
    implementation presentationDependencies.dagger
    implementation presentationDependencies.daggerAndroid
    kapt presentationDependencies.daggerCompiler
    kapt presentationDependencies.daggerAndroidCompiler

    // Java8 support for Life cycles
    implementation presentationDependencies.lifeCycleJava8Dep

    // RxJava support for Room
    implementation presentationDependencies.roomRxJava
    implementation presentationDependencies.lcReactiveStreams

    // Glide
    api presentationDependencies.glide
    kapt presentationDependencies.glideCompiler

    // Jetpack Navigation
    def archComponentsDep = rootProject.ext.archComponentsDep
    implementation archComponentsDep.activityKtx
    implementation archComponentsDep.fragmentKtx
    implementation archComponentsDep.navigationKtx
    implementation archComponentsDep.coreKtx
    implementation archComponentsDep.saveStateKtx

    /* Coroutines */
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    // Test Dependencies
    def testDependencies = rootProject.ext.testCoreDep
    testImplementation testDependencies.mockito
    testImplementation testDependencies.mockitoKotlin
    testImplementation testDependencies.jUnit
    testImplementation testDependencies.robolectric
    testImplementation testDependencies.archTesting
    testImplementation testDependencies.testCore
    testImplementation testDependencies.runner
    testImplementation testDependencies.xTestRules
    testImplementation testDependencies.extJUnit
    testImplementation testDependencies.espressoCore
    testImplementation testDependencies.extTruth
    testImplementation testDependencies.xEspressoCore
    testImplementation testDependencies.xEspressoContrib
    testImplementation testDependencies.espressoIntents
    testImplementation testDependencies.mockk

    testImplementation "com.squareup.okhttp3:mockwebserver:4.2.1"

    implementation testDependencies.fragment
    debugImplementation testDependencies.fragmentTesting

    androidTestImplementation testDependencies.testRunner
    androidTestImplementation testDependencies.testRules
    androidTestImplementation testDependencies.espressoIntents
    androidTestImplementation(testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}
